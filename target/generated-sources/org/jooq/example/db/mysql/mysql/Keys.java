/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.mysql.mysql;


import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.example.db.mysql.tables.Author;
import org.jooq.example.db.mysql.tables.Book;
import org.jooq.example.db.mysql.tables.Quote;
import org.jooq.example.db.mysql.tables.records.AuthorRecord;
import org.jooq.example.db.mysql.tables.records.BookRecord;
import org.jooq.example.db.mysql.tables.records.QuoteRecord;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>trade</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = Identities0.IDENTITY_AUTHOR;
    public static final Identity<BookRecord, Integer> IDENTITY_BOOK = Identities0.IDENTITY_BOOK;
    public static final Identity<QuoteRecord, Long> IDENTITY_QUOTE = Identities0.IDENTITY_QUOTE;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = UniqueKeys0.KEY_AUTHOR_PRIMARY;
    public static final UniqueKey<AuthorRecord> KEY_AUTHOR_FIRST_NAME = UniqueKeys0.KEY_AUTHOR_FIRST_NAME;
    public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = UniqueKeys0.KEY_BOOK_PRIMARY;
    public static final UniqueKey<BookRecord> KEY_BOOK_TITLE = UniqueKeys0.KEY_BOOK_TITLE;
    public static final UniqueKey<QuoteRecord> KEY_QUOTE_PRIMARY = UniqueKeys0.KEY_QUOTE_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK_IBFK_1 = ForeignKeys0.BOOK_IBFK_1;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AuthorRecord, Integer> IDENTITY_AUTHOR = Internal.createIdentity(Author.AUTHOR, Author.AUTHOR.ID);
        public static Identity<BookRecord, Integer> IDENTITY_BOOK = Internal.createIdentity(Book.BOOK, Book.BOOK.ID);
        public static Identity<QuoteRecord, Long> IDENTITY_QUOTE = Internal.createIdentity(Quote.QUOTE, Quote.QUOTE.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AuthorRecord> KEY_AUTHOR_PRIMARY = Internal.createUniqueKey(Author.AUTHOR, "KEY_author_PRIMARY", Author.AUTHOR.ID);
        public static final UniqueKey<AuthorRecord> KEY_AUTHOR_FIRST_NAME = Internal.createUniqueKey(Author.AUTHOR, "KEY_author_first_name", Author.AUTHOR.FIRST_NAME, Author.AUTHOR.LAST_NAME);
        public static final UniqueKey<BookRecord> KEY_BOOK_PRIMARY = Internal.createUniqueKey(Book.BOOK, "KEY_book_PRIMARY", Book.BOOK.ID);
        public static final UniqueKey<BookRecord> KEY_BOOK_TITLE = Internal.createUniqueKey(Book.BOOK, "KEY_book_title", Book.BOOK.TITLE);
        public static final UniqueKey<QuoteRecord> KEY_QUOTE_PRIMARY = Internal.createUniqueKey(Quote.QUOTE, "KEY_quote_PRIMARY", Quote.QUOTE.ID);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<BookRecord, AuthorRecord> BOOK_IBFK_1 = Internal.createForeignKey(org.jooq.example.db.mysql.Keys.KEY_AUTHOR_PRIMARY, Book.BOOK, "book_ibfk_1", Book.BOOK.AUTHOR_ID);
    }
}
